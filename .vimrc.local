" Escape with fj
inoremap fj <esc>

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Show line numbers
set nu

" Support project-specific .vimrc.local file
set secure
set exrc

" Ignore case of normal letters
set ignorecase

" Ignore case when using lowercase letters only
set smartcase

" Substitute a highlighted word (h/t Vidal)
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" Enable quick help lookup
nnoremap <F1> :help <C-r><C-w><CR>

" Open vimrc.local
nnoremap <leader>ev :vsplit ~/.vimrc.local<cr>

" Source vimrc.local
nnoremap <leader>sv :source ~/.vimrc.local<cr>

" Capitalize previous word in Insert Mode
inoremap <leader><c-u> <esc>vbU

" Capitalize previous word in Normal Mode
nnoremap <leader><c-u> viwU

" Abbreviate my email
iabbrev @@ jake@jakeworth.com

" Prepare text files for book-style reading
augroup spellcheck_documentation
  autocmd BufNewFile,BufRead *.md,*.rdoc,*.txt  setlocal spell
  autocmd BufNewFile,BufRead *.md,*.rdoc,*.txt  setlocal nonu
augroup END

" Dillon and Jake Sort™
vnoremap <F5> :sort<CR>

" Vidal and Dorian Sort™
vnoremap <silent> gs :sort<cr>

" Use a color scheme I like
color railscasts

" Allow Vim to overwrite the original crontab
au FileType crontab setlocal bkc=yes

" Allow Vim-JSX to highlight *.js files
let g:jsx_ext_required = 0

" Allow MatchTagAlways to highlight JSX
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'javascript.jsx' : 1,
    \}

" Run Rubocop
nnoremap <leader>ru :! rubocop -a % <cr>

" Turn on vim-closetag for JavaScript
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js'

" vim-mix-format settings
let g:mix_format_on_save = 1
let g:mix_format_options = '--check-equivalent'
let g:mix_format_silent_errors = 1

" FZF
let $FZF_DEFAULT_COMMAND = 'ag --hidden -l -g ""'
nnoremap <silent> <C-b> :Buffers<CR>
nnoremap <silent> <C-g>g :Ag<CR>
nnoremap <silent> <C-p> :Files<CR>

" vim-go mappings
augroup go_lang
  " Run tests
  autocmd FileType go nnoremap <leader>gt :GoTest<cr>

  " Run test under cursor
  autocmd FileType go nnoremap <leader>gtf :GoTestFunc<cr>

  " Run linter
  autocmd FileType go nnoremap <leader>gl :GoLint<cr>

  " Load documentation for word under cursor
  autocmd FileType go nnoremap <leader>gd :GoDoc<cr>

  " Run program
  autocmd FileType go nnoremap <leader>gr :GoRun<cr>
augroup END

" Let mdx files be treated as markdown
autocmd BufEnter *.mdx set ft=markdown
